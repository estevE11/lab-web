import { Header } from '@/components/ui/header';
import { apiGET, apiGETAuth, apiPOSTAuth } from '@/utils/apiUtils';
import { checkToken } from '@/utils/cookieUtils';
import { Badge, Box, Button, Checkbox, Divider, Icon, IconButton } from '@chakra-ui/react';
import Head from 'next/head'
import { useEffect, useState } from 'react';
import { Stars } from '../components/ui/stars';
import { CheckIcon } from '@chakra-ui/icons';

export default function Home() {
    const [id, setId] = useState("");

    const [course, setCourse] = useState<any>();
    const [purchased, setPurchased] = useState(false);

    const init = (logged: boolean) => {
        const urlParams = new URLSearchParams(window.location.search);
        const _id = urlParams.get('id');
        setId(_id || "");

        if (!logged) {
            apiGET("/courses/" + _id).then((data: any) => {
                setCourse(data);
            }) 
        } else {
            apiGETAuth("/courses/" + _id).then((data: any) => {
                setPurchased(Object.keys(data).includes("lessons"));
                setCourse(data);
                console.log(data);
            }) 
        }
    };

    const purchase = () => {
        apiPOSTAuth("/courses/" + id + "/purchase", {}).then((data: any) => {
            location.reload();
        });
    }

    const markAsDone = (lessonId: number) => {
        apiPOSTAuth("/courses/" + id + "/lessons/" + lessonId + "/done", {}).then((data: any) => {
            location.reload();
        });
    }

    const isDone = (lessonId: number) => {
        const lessonsDone = course.lessonsDone;
        return lessonsDone.filter((e: any) => e.id == lessonId).length > 0;
    }

    const canBeChecked = (lessonIndex: number) => {
        for (let i = 0; i < lessonIndex; i++) { 
            if (!isDone(course.lessons[i].id)) {
                return false;
            }
        }

        return true;
    }

    const calcCourseProgress = () => {
        return course.lessonsDone.length / course.lessons.length * 100;
    }


    return (
        <>
            <Head>
                <title>Dev</title> <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <Box m={2}>
                <Header onInit={init}></Header>
                { course && 
                    <Box>
                        <Box fontSize={32}>
                            {course.title}
                            <Badge ml={3} colorScheme='green'>{course.categoryDTO.name}</Badge>
                            <Badge ml={3}>{course.publicationDate.substring(0, 4)}</Badge>
                            <Badge ml={3}>{course.languageDTO.name.substring(0, 3)}</Badge>
                        </Box>
                        <Box>{course.description}</Box>
                        <Box mt={3}>Author: {course.creatorDTO.name} {course.creatorDTO.secondName}</Box>
                        <Box>Price: {course.price}â‚¬</Box>
                        {!purchased ?
                            <Button colorScheme="green" onClick={purchase}>Purchase</Button>
                            :
                            <>
                                <Box mt={10}>
                                    <Box fontSize="32">Lessons <Box as="span" fontSize={16}>({ calcCourseProgress() }%)</Box></Box>
                                    <table>
                                        <tbody>
                                            {course.lessons.map((e: any, index: number) => {
                                                const done = isDone(e.id);
                                                return (
                                                    <tr>
                                                        <Box as="td" pr={5}>{e.title}</Box>
                                                        <td>
                                                            {!done && canBeChecked(index) &&
                                                                <Button
                                                                    size={"sm"}
                                                                    variant='solid'
                                                                    colorScheme='teal'
                                                                    aria-label='Done'
                                                                    fontSize='15px'
                                                                    onClick={() => markAsDone(e.id)}
                                                                >Mark as done</Button>
                                                            }

                                                            {done && <CheckIcon></CheckIcon>}
                                                        </td>
                                                    </tr>
                                                )
                                            })}
                                        </tbody>
                                    </table>
                                </Box>
                                <Box mt={10}>
                                    <Box fontSize="32">Reviews</Box>
                                    {calcCourseProgress() >= 50 && <Button size="sm" mb={5}>Add review</Button>}
                                    <Box>
                                        {course.reviewsDTO.map((e: any) => (
                                            <Box>
                                                <Stars rating={e.satisfaction}></Stars>
                                                <Box as="span" fontSize={20}>{e.title}</Box>
                                                <Box>{e.content}</Box>
                                                <Divider></Divider>
                                            </Box>
                                        ))}
                                    </Box>
                                </Box>
                            </>
                        }
                    </Box>
                }
            </Box>
        </>
    )
}
